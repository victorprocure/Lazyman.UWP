// <auto-generated />

namespace UI.Framework
{
    using System;
    using System.ComponentModel;

    using Windows.Foundation;

    /// <summary>
    /// Strict typed event handler
    /// </summary>
    /// <param name="sender">Event sender</param>
    /// <param name="args">Event arguments</param>
    /// <typeparam name="T">Type of event arguments</typeparam>
    public delegate void TypedEventHandler<in T>(object sender, T args);

    /// <inheritdoc />
    /// <typeparam name="T">Type of event value</typeparam>
    public class EventArgs<T> : EventArgs
    {
        /// <inheritdoc />
        public EventArgs(T value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Event argument value
        /// </summary>
        public T Value { get; }
    }

    /// <inheritdoc />
    /// <typeparam name="T">Type of event argument value</typeparam>
    public class CancelEventArgs<T> : CancelEventArgs
    {
        /// <inheritdoc />
        /// <param name="value">Type of event argument value</param>
        public CancelEventArgs(T value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Event argument value
        /// </summary>
        public T Value { get; }
    }

    /// <inheritdoc />
    /// <summary>
    /// Represents a deferred event argument
    /// </summary>
    public class DeferredEventArgs : EventArgs
    {
        /// <summary>
        /// The deferral manager
        /// </summary>
        private readonly DeferralManager manager;

        /// <inheritdoc />
        /// <summary>
        /// Initializes a new instance <see cref="T:UI.Framework.DeferredEventArgs" /> class with the <see cref="!:DeferralManager" /> set
        /// </summary>
        /// <param name="manager"></param>
        public DeferredEventArgs(DeferralManager manager)
        {
            this.manager = manager;
        }

        /// <summary>
        /// Gets the deferral from the manager
        /// </summary>
        /// <returns>The managed deferral</returns>
        public Deferral GetDeferral() => this.manager.GetDeferral();
    }
}